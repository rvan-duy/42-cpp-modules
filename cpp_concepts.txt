                                                C++
                                                        an insult to the human brain

##################################################################################################################

Namespaces:
    - Namespaces solve problems with functions having the same, for example:
        You write a function called xyz() and you use a library that has xyz() declared
        The compiler has no way of knowing which version you are referring to

Classes:
    - A class is a blueprint for an object, which has attributes and methods

    Constructors:
        - Whenever an Object of a Class is created, its constructor is called
            It's parent class constructors are also called! Parent constructors are called before the child
        - By default the constructors invoked are the "no-argument" constructors
        - If the parent class needs an argument for its constructor, you can use initialization lists

    Initialization lists:
        - These are useful for:
            - Passing arguments to constructors of parent Classes
            - Initializing fields of Classes with default values
            - It is necessary to initialize const fields

    Member functions (methods):
        - Functions which are declared inside a class which executes on the class

    Static variables inside classes:
        - Static variables inside classes are variables that are initialized once per class
            they can then be accessed by every instance of that class

    Static methods inside classes:
        - Static methods inside classes are methods that can access static variables

    Const methods inside classes:
        - Basically means a method should not be changing the state of an object

    Inheritance:
        - Why? To reuse functionality and a fast implementation time, it's also easier to create and maintain
        - The existing class is the base class, and the new class the derived class
        - The logic is as follows: the derived class is a existing class (IS-A logic)

Stdio streams:
    - Streams are an abstraction that represent a device on which input and output operations are performed
        A stream basically represents a source or destination of characters of indefinite length
        C++ provides a standard `iostream` library, which you can use to operate with streams

References vs Pointers:
    - Pointers are variables which hold a memory address of another variable
    - References are aliases for other variables
        - References cannot be reassigned
    - Pointers can be NULL, references cannot

this keyword in methods

##################################################################################################################

Sources: 
    - https://www.cprogramming.com


##################################################################################################################

                                                C++ Google Style Guide
                                                
##################################################################################################################

                clang-format -style=file ${FILE_NAME} or clang-format -style=google ${FILE_NAME}

Classes:
    - Declaration Order:
        - Types and type aliases (typedef, using, enum, nested structs and classes)
        - Static constants
        - Factory functions
        - Constructors and assignment operators
        - Destructor
        - All other functions (static and non-static member functions, and friend functions)
        - Data members (static and non-static)

Functions:
    - Write small and focuses functions
        - When a function exceeds 40 lines, think of breaking it up into smaller pieces
    - Prefer using return values over output parameters: they improve readability and often provide same or better performance
    - Prefer using return by value, failing that, return by reference. Avoid returning a pointer unless it can be NULL

##################################################################################################################

Sources:
    - https://google.github.io/styleguide/cppguide.html

##################################################################################################################

                                                Floating Point Numbers

##################################################################################################################

4-byte floating point numbers can hold fewer distinct values than 4-byte integers. This is because the internal representation
of floating point numbers is more complicated than integers.

How floating points are represented (IEEE-754 standard):
    - first bit is sign telling whether the number is positive or negative
    - second byte is the exponent of the number
    - third and fourth bytes are the mantissa (or significand)
        - 2 ^ exponent

##################################################################################################################

Pro tips:
    - read declaration backwards ( https://stackoverflow.com/a/162615/14639673 )
